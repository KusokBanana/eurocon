<?php

namespace frontend\models;

use frontend\models\books\BookMarketplace;
use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "marketplace_item".
 *
 * @property integer $id
 * @property integer $item_type_id
 * @property integer $type_id
 * @property integer $status_id
 * @property integer $budget_id
 * @property integer $category_id
 * @property string $name
 * @property string $description
 * @property string $image
 * @property string $date
 */
class MarketplaceItem extends ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'marketplace_item';
    }


    public static $default_image = '@web/img/portraits/placeholder.png';
    public static $image_path = '/upload/marketplace/';
    public static $limit = 12;

    const FILE_WIDTH = 500;
    const FILE_HEIGHT = 300;
    public $relation = false;

    const IMAGE_SIZE = 1024 * 1024 * 40; // 40 MB
    public $imageFile;
    public $imageShow;

    public static $types = [
        1 => 'New building',
        2 => 'Renovation',
        3 => 'Extension',
    ];

    public static $statuses = [
        1 => 'Planning',
        2 => 'Confirmed',
        3 => 'Under Construction',
        4 => 'Ready',
    ];

    public static $budgets = [
        1 => '[ 0; 1 mln $ ]',
        2 => '[ 1 mln $; 3 mln $ ]',
        3 => '[ 3 mln $; 5 mln $ ]',
        4 => '[ 5 mln $; 10 mln $ ]',
        5 => ' >10 mln $ ',
    ];

    public static $categories = [
        1 => 'Private / Farms',
        2 => 'Residential',
        3 => 'Hotel',
        4 => 'Restaurant',
        5 => 'Shop',
        6 => 'Office',
        7 => 'Logistic',
        8 => 'Industry',
        9 => 'Health and Medicine',
        10 => 'Retirement residentials',
        11 => 'Schools and Universities',
        12 => 'Culture',
        13 => 'Sport',
        14 => 'Sacral',
        15 => 'Goverment',
        16 => 'rports and Railway stations',
        17 => 'Energetics',
        18 => 'Infrastructure',
        19 => 'Landscape',
        20 => 'Other',
    ];

    public static $editability = [
        1 => 'Everyone',
        2 => 'Only your friends',
        3 => 'Only you',
    ];

    const ITEM_TYPE_OFFER = 1;
    const ITEM_TYPE_REQUEST = 2;

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['item_type_id', 'name'], 'required'],
            [['item_type_id', 'type_id', 'status_id', 'budget_id', 'category_id'], 'integer'],
            [['description'], 'string'],
            [['name'], 'string', 'max' => 255],
            [['image'], 'string', 'max' => 126],
            [['date'], 'date'],
            [['date'], 'default', 'value' => date('Y-m-d')],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'item_type_id' => 'Item Type ID',
            'type_id' => 'Type ID',
            'status_id' => 'Status ID',
            'budget_id' => 'Budget ID',
            'category_id' => 'Category ID',
            'name' => 'Name',
            'description' => 'Description',
            'image' => 'Image',
            'date' => 'Date',
        ];
    }

    public static function getData($field_id, $type_for, $page = 1, $search = '', $filter = null)
    {

        $query = BookMarketplace::get($field_id, $type_for);
        static::setFilters($query, $search, $filter);

        return Pagination::getData($query, $page, self::$limit, 'marketplace', $filter);

    }

    public static function getAll($page = 1, $search = '', $filter = null)
    {

        $query = static::find();
        static::setFilters($query, $search, $filter);

        return Pagination::getData($query, $page, self::$limit, 'marketplace', $filter);

    }

    public static function setFilters(&$query, $search, &$filter)
    {

        $where = [];
        $marketPlaceSample = new self();
        $newFilter = [];
        if ($filter && !empty($filter)) {
            foreach ($filter as $oneFilter)
            {
                $name = $oneFilter['name'];
                $value = $oneFilter['value'];
                $isAttr = $marketPlaceSample->hasAttribute($name);
                if ($isAttr && $value) {
                    $where[self::tableName().'.'.$name] = $value;
                    $newFilter[$name] = $value;
                }
            }
        }
        $filter = $newFilter;

        $query->where($where)->andFilterWhere(['LIKE', self::tableName() . '.name', $search]);
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        $this->setImage();
    }

    private function setImage()
    {

        $image = $this->image;
        $path = Yii::getAlias('@frontend') . '/web' . self::$image_path . '/';
        $isImageExist = file_exists($path . $image);
        if ($image && $isImageExist) {
            $this->imageShow = Yii::getAlias('@web') . self::$image_path . '/' . $image;
        } else {
            $this->imageShow = static::$default_image;
        }

    }

}
